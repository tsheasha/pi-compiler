
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 27 13:05:40 EET 2013
//----------------------------------------------------

package automatic;

import java.io.IOException;
import java.util.ArrayList;

import java_cup.runtime.Symbol;
import sem.AndExpression;
import sem.AndTest;
import sem.ArithmeticExpression;
import sem.AssignmentStmt;
import sem.BL;
import sem.Call;
import sem.ClassDef;
import sem.Comparison;
import sem.CompoundStmt;
import sem.DefParameter;
import sem.Elif;
import sem.ElseIf;
import sem.ElseIfOptional;
import sem.Expression;
import sem.FileInput;
import sem.FuncDef;
import sem.ID;
import sem.IfStmt;
import sem.MultExpression;
import sem.NM;
import sem.OrExpression;
import sem.ParameterList;
import sem.PrimaryExpression;
import sem.PrintStmt;
import sem.RaiseStmt;
import sem.ReturnStmt;
import sem.ST;
import sem.SimpleStmt;
import sem.Statement;
import sem.StmtList;
import sem.Suite;
import sem.UnaryExpression;
import sem.WhileStmt;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 27 13:05:40 EET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\007\005\000\002\007\004\000\002\007\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\006\000\002\012\006\000" +
    "\002\012\004\000\002\012\002\000\002\013\004\000\002" +
    "\014\004\000\002\014\006\000\002\016\004\000\002\016" +
    "\003\000\002\017\007\000\002\017\005\000\002\020\010" +
    "\000\002\021\002\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\024\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\004\000\002\026\005\000\002\026\004\000\002\026\003" +
    "\000\002\027\003\000\002\027\004\000\002\030\004\000" +
    "\002\030\003\000\002\031\003\000\002\031\005\000\002" +
    "\032\003\000\002\032\005\000\002\033\005\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\005\000\002\036\003\000\002\036" +
    "\005\000\002\037\003\000\002\037\005\000\002\037\005" +
    "\000\002\040\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\041\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\002\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\006\000" +
    "\002\044\005\000\002\015\003\000\002\015\002\000\002" +
    "\045\003\000\002\045\004\000\002\045\006\000\002\045" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\030\002\ufffc\003\004\007\ufffc\034\ufffc\042" +
    "\ufffc\043\ufffc\046\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\001\002\000\004\002\uffff\001\002\000\026\002\001\007" +
    "\024\034\033\042\014\043\021\046\020\053\034\054\011" +
    "\055\031\056\025\001\002\000\004\002\007\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufffa\007\ufffa\034\ufffa" +
    "\036\ufffa\042\ufffa\043\ufffa\046\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\001\002\000\004\007\212\001\002\000\026" +
    "\002\ufffd\007\ufffd\034\ufffd\042\ufffd\043\ufffd\046\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\006\032\ufff5" +
    "\034\ufff5\001\002\000\020\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\015\041\021\047\026\050\001\002\000\030\002\uffee" +
    "\007\uffee\034\uffee\036\uffee\042\uffee\043\uffee\046\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\001\002\000\006\032\ufff4" +
    "\034\ufff4\001\002\000\030\002\uffef\007\uffef\034\uffef\036" +
    "\uffef\042\uffef\043\uffef\046\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\001\002\000\024\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\015\041\021\047\026\050\032\uffd1\034\uffd1\001\002" +
    "\000\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021" +
    "\047\026\050\001\002\000\004\010\172\001\002\000\004" +
    "\034\ufff9\001\002\000\006\010\uffd9\040\170\001\002\000" +
    "\024\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047" +
    "\026\050\032\uffa7\034\uffa7\001\002\000\006\032\161\034" +
    "\ufff6\001\002\000\030\002\ufff0\007\ufff0\034\ufff0\036\ufff0" +
    "\042\ufff0\043\ufff0\046\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\001\002\000\006\032\ufff3\034\ufff3\001\002\000\004" +
    "\007\133\001\002\000\006\032\ufff2\034\ufff2\001\002\000" +
    "\026\002\ufffe\007\ufffe\034\ufffe\042\ufffe\043\ufffe\046\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\024\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026\050" +
    "\032\uffd4\034\uffd4\001\002\000\030\002\ufff1\007\ufff1\034" +
    "\ufff1\036\ufff1\042\ufff1\043\ufff1\046\ufff1\053\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\001\002\000\004\034\037\001\002\000" +
    "\030\002\ufffb\007\ufffb\034\ufffb\036\ufffb\042\ufffb\043\ufffb" +
    "\046\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000" +
    "\006\032\uffd3\034\uffd3\001\002\000\020\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\015\041\021\047\026\050\001\002\000" +
    "\056\007\uffc1\011\uffc1\012\uffc1\013\106\016\uffc1\017\uffc1" +
    "\020\uffc1\023\uffc1\024\uffc1\025\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\040\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\056\uffc1\001\002\000\012\004\122\005" +
    "\120\006\123\007\121\001\002\000\072\007\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\037\uffba\040\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\056\uffba" +
    "\001\002\000\014\031\uffd5\032\uffd5\034\uffd5\040\114\047" +
    "\115\001\002\000\030\007\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\040\uffd0\046\uffd0\047\uffd0\050\112\053\uffd0\056" +
    "\uffd0\001\002\000\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\015\041\021\047\026\050\001\002\000\020\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\015\041\021\047\026\050\001\002" +
    "\000\054\007\uffcb\011\uffcb\012\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\023\uffcb\024\uffcb\025\104\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\040\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\056\uffcb\001\002\000\052\007\uffce\011\074" +
    "\012\073\016\101\017\072\020\100\023\076\024\075\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\040\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\102\052\071\053\uffce\056\uffce\001\002\000" +
    "\062\007\uffbf\011\uffbf\012\uffbf\013\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\065\023\uffbf\024\uffbf\025\uffbf\026\066\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\040\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf\001\002\000" +
    "\072\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014\055\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\056\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\057\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\037\060\040\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\056\uffbd\001\002\000\020\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\015\041\021\047\026\050\001\002\000" +
    "\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047" +
    "\026\050\001\002\000\020\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\015\041\021\047\026\050\001\002\000\020\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026\050\001" +
    "\002\000\072\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\037\uffb6\040\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\056\uffb6\001\002\000\072\007\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\037\uffb8\040" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\056\uffb8\001\002\000\072\007\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\037\uffb7\040\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7\001\002\000" +
    "\072\007\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\037\uffb9\040\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\056\uffb9\001\002\000\020\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\015\041\021\047\026\050\001\002\000" +
    "\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047" +
    "\026\050\001\002\000\072\007\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\055\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\056" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\057\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\037\060\040\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\056\uffbb\001\002\000" +
    "\072\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\055\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\056\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\057\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\037\060\040\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\056\uffbc\001\002\000\020\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\015\uffc2\021\uffc2\026\uffc2\001\002\000" +
    "\020\004\uffc7\005\uffc7\006\uffc7\007\uffc7\015\uffc7\021\uffc7" +
    "\026\uffc7\001\002\000\020\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\015\uffc5\021\uffc5\026\uffc5\001\002\000\020\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\015\uffc8\021\uffc8\026\uffc8\001" +
    "\002\000\020\004\uffc6\005\uffc6\006\uffc6\007\uffc6\015\uffc6" +
    "\021\uffc6\026\uffc6\001\002\000\020\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\015\uffc9\021\uffc9\026\uffc9\001\002\000\020" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026" +
    "\050\001\002\000\020\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\015\uffc4\021\uffc4\026\uffc4\001\002\000\020\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\015\uffca\021\uffca\026\uffca\001\002" +
    "\000\020\004\uffc3\005\uffc3\006\uffc3\007\uffc3\015\uffc3\021" +
    "\uffc3\026\uffc3\001\002\000\054\007\uffcc\011\uffcc\012\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc\025\104\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\040\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056\uffcc\001\002\000" +
    "\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047" +
    "\026\050\001\002\000\056\007\uffc0\011\uffc0\012\uffc0\013" +
    "\106\016\uffc0\017\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\040\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0\001\002" +
    "\000\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021" +
    "\047\026\050\001\002\000\062\007\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\016\uffbe\017\uffbe\020\uffbe\021\065\023\uffbe\024" +
    "\uffbe\025\uffbe\026\066\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\040\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\056\uffbe\001\002\000\012\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\001\002\000\012\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\001\002\000\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\015\041\021\047\026\050\001\002\000\052\007\uffcd\011" +
    "\074\012\073\016\101\017\072\020\100\023\076\024\075" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\102\052\071\053\uffcd\056\uffcd\001\002" +
    "\000\026\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021" +
    "\047\026\050\031\uffd6\032\uffd6\034\uffd6\001\002\000\020" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026" +
    "\050\001\002\000\030\007\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\040\uffcf\046\uffcf\047\uffcf\050\112\053\uffcf\056" +
    "\uffcf\001\002\000\010\031\uffd7\032\uffd7\034\uffd7\001\002" +
    "\000\072\007\uffad\011\uffad\012\uffad\013\uffad\014\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\037\uffad\040\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\056\uffad\001\002\000\074\007\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\126\031\uffb0\032\uffb0\033\uffb0\034\uffb0\037\uffb0" +
    "\040\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\056\uffb0\001\002\000\072\007\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\037\uffaf\040\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\056\uffaf\001\002" +
    "\000\072\007\uffae\011\uffae\012\uffae\013\uffae\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\037\uffae\040\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\056\uffae\001\002\000\072\007\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\037\uffb5\040\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\056" +
    "\uffb5\001\002\000\072\007\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\037\uffac\040\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\056\uffac\001\002\000\022" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026" +
    "\050\031\130\001\002\000\004\031\131\001\002\000\072" +
    "\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\037" +
    "\uffaa\040\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\056\uffaa\001\002\000\072\007\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\037\uffab\040\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\056\uffab\001" +
    "\002\000\012\004\uffb2\005\uffb2\006\uffb2\007\uffb2\001\002" +
    "\000\004\030\134\001\002\000\006\007\135\031\uffe1\001" +
    "\002\000\010\010\157\031\uffdd\040\uffdd\001\002\000\004" +
    "\031\142\001\002\000\006\031\uffdf\040\140\001\002\000" +
    "\006\007\135\031\uffe1\001\002\000\004\031\uffe0\001\002" +
    "\000\016\007\uffa8\033\143\034\uffa8\046\uffa8\053\uffa8\056" +
    "\uffa8\001\002\000\014\007\uffa9\034\uffa9\046\uffa9\053\uffa9" +
    "\056\uffa9\001\002\000\030\002\uffe2\007\uffe2\034\uffe2\036" +
    "\uffe2\042\uffe2\043\uffe2\046\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\001\002\000\014\007\024\034\150\046\020\053" +
    "\034\056\025\001\002\000\034\002\uffe9\007\uffe9\034\uffe9" +
    "\036\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\004\034\156" +
    "\001\002\000\004\035\151\001\002\000\022\007\024\042" +
    "\014\043\021\046\020\053\034\054\011\055\031\056\025" +
    "\001\002\000\024\007\uffe5\036\uffe5\042\uffe5\043\uffe5\046" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\024" +
    "\007\024\036\155\042\014\043\021\046\020\053\034\054" +
    "\011\055\031\056\025\001\002\000\024\007\uffe6\036\uffe6" +
    "\042\uffe6\043\uffe6\046\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\001\002\000\034\002\uffe7\007\uffe7\034\uffe7\036\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\001\002\000\034\002\uffe8\007\uffe8" +
    "\034\uffe8\036\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\020" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026" +
    "\050\001\002\000\010\031\uffde\040\uffde\047\115\001\002" +
    "\000\014\007\024\034\ufff7\046\020\053\034\056\025\001" +
    "\002\000\004\034\ufff8\001\002\000\012\032\uffa6\034\uffa6" +
    "\040\164\047\115\001\002\000\020\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\015\041\021\047\026\050\001\002\000\012" +
    "\032\uffa5\034\uffa5\040\166\047\115\001\002\000\020\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047\026\050" +
    "\001\002\000\010\032\uffa4\034\uffa4\047\115\001\002\000" +
    "\006\007\024\010\uffd8\001\002\000\004\010\uffda\001\002" +
    "\000\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021" +
    "\047\026\050\001\002\000\006\032\uffdb\034\uffdb\001\002" +
    "\000\020\007\uffa8\033\143\034\uffa8\046\uffa8\047\115\053" +
    "\uffa8\056\uffa8\001\002\000\034\002\uffea\007\uffea\034\uffea" +
    "\036\uffea\042\uffea\043\uffea\044\176\045\177\046\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\001\002\000\016\007\uffa8" +
    "\033\143\034\uffa8\046\uffa8\053\uffa8\056\uffa8\001\002\000" +
    "\020\004\uffb1\005\uffb1\006\uffb1\007\uffb1\015\041\021\047" +
    "\026\050\001\002\000\030\002\uffed\007\uffed\034\uffed\036" +
    "\uffed\042\uffed\043\uffed\046\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\001\002\000\020\007\uffa8\033\143\034\uffa8\046" +
    "\uffa8\047\115\053\uffa8\056\uffa8\001\002\000\034\002\uffea" +
    "\007\uffea\034\uffea\036\uffea\042\uffea\043\uffea\044\176\045" +
    "\177\046\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001\002" +
    "\000\030\002\uffec\007\uffec\034\uffec\036\uffec\042\uffec\043" +
    "\uffec\046\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001\002" +
    "\000\030\002\uffeb\007\uffeb\034\uffeb\036\uffeb\042\uffeb\043" +
    "\uffeb\046\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002" +
    "\000\006\032\uffd2\034\uffd2\001\002\000\020\007\uffa8\033" +
    "\143\034\uffa8\046\uffa8\047\115\053\uffa8\056\uffa8\001\002" +
    "\000\032\002\uffe3\007\uffe3\034\uffe3\036\uffe3\042\uffe3\043" +
    "\uffe3\044\210\046\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\001\002\000\016\007\uffa8\033\143\034\uffa8\046\uffa8\053" +
    "\uffa8\056\uffa8\001\002\000\030\002\uffe4\007\uffe4\034\uffe4" +
    "\036\uffe4\042\uffe4\043\uffe4\046\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\001\002\000\016\007\uffa8\033\143\034\uffa8" +
    "\046\uffa8\053\uffa8\056\uffa8\001\002\000\030\002\uffdc\007" +
    "\uffdc\034\uffdc\036\uffdc\042\uffdc\043\uffdc\046\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\036\004\011\005\035\006\025\007\022\010\007" +
    "\011\034\017\026\020\016\023\014\024\012\025\021\027" +
    "\015\030\031\045\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\031\205\032\045\033\051" +
    "\035\050\036\041\037\052\040\053\041\043\042\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\026\204\031\044\032\045\033\051\035\050\036" +
    "\041\037\052\040\053\041\043\042\042\001\001\000\024" +
    "\031\173\032\045\033\051\035\050\036\041\037\052\040" +
    "\053\041\043\042\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\031\162\032\045\033" +
    "\051\035\050\036\041\037\052\040\053\041\043\042\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\026\037\031\044\032\045\033\051\035\050\036" +
    "\041\037\052\040\053\041\043\042\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\131\001\001\000\002\001\001\000\006" +
    "\043\123\044\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\110\001\001\000\004" +
    "\042\107\001\001\000\002\001\001\000\004\034\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\063" +
    "\042\042\001\001\000\006\041\062\042\042\001\001\000" +
    "\006\041\061\042\042\001\001\000\006\041\060\042\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\040\067\041\043\042\042" +
    "\001\001\000\010\040\066\041\043\042\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\035\102\036\041\037\052" +
    "\040\053\041\043\042\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\036\104\037\052\040\053\041\043\042\042\001\001\000" +
    "\002\001\001\000\012\037\106\040\053\041\043\042\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\033\112\035\050\036\041\037\052\040\053" +
    "\041\043\042\042\001\001\000\004\034\076\001\001\000" +
    "\026\026\116\031\044\032\045\033\051\035\050\036\041" +
    "\037\052\040\053\041\043\042\042\001\001\000\022\032" +
    "\115\033\051\035\050\036\041\037\052\040\053\041\043" +
    "\042\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\026" +
    "\126\031\044\032\045\033\051\035\050\036\041\037\052" +
    "\040\053\041\043\042\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\135\022\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\140" +
    "\022\136\001\001\000\002\001\001\000\006\013\143\015" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\146\006\025\007\022\014\145\024\012\025\021\027" +
    "\015\030\031\045\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\151\005\035\006" +
    "\025\007\022\010\007\011\034\016\152\017\026\020\016" +
    "\023\014\024\012\025\021\027\015\030\031\045\027\001" +
    "\001\000\002\001\001\000\036\004\153\005\035\006\025" +
    "\007\022\010\007\011\034\017\026\020\016\023\014\024" +
    "\012\025\021\027\015\030\031\045\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\031" +
    "\157\032\045\033\051\035\050\036\041\037\052\040\053" +
    "\041\043\042\042\001\001\000\002\001\001\000\020\006" +
    "\025\007\161\024\012\025\021\027\015\030\031\045\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\031" +
    "\164\032\045\033\051\035\050\036\041\037\052\040\053" +
    "\041\043\042\042\001\001\000\002\001\001\000\024\031" +
    "\166\032\045\033\051\035\050\036\041\037\052\040\053" +
    "\041\043\042\042\001\001\000\002\001\001\000\004\025" +
    "\170\001\001\000\002\001\001\000\026\026\172\031\044" +
    "\032\045\033\051\035\050\036\041\037\052\040\053\041" +
    "\043\042\042\001\001\000\002\001\001\000\006\013\174" +
    "\015\144\001\001\000\004\012\177\001\001\000\006\013" +
    "\203\015\144\001\001\000\024\031\200\032\045\033\051" +
    "\035\050\036\041\037\052\040\053\041\043\042\042\001" +
    "\001\000\002\001\001\000\006\013\201\015\144\001\001" +
    "\000\004\012\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\206\015\144\001\001" +
    "\000\002\001\001\000\006\013\210\015\144\001\001\000" +
    "\002\001\001\000\006\013\212\015\144\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol cur_token){
		try {
		Lexer l = (Lexer)getScanner();
		if(cur_token.value!=null){
			if(cur_token.sym!=sym.NEWLINE)
				throw new SyntaxException(l.getLine()+1, 
				(l.getChar()-((String)(cur_token.value)).length()+1)+1,
				(String)cur_token.value, AP.input.get(l.getLine()));
			else			
				throw new SyntaxException(l.getLine()+1, 
				(l.getCharNo()-((String)(cur_token.value)).length()+1)+1, 
				(String)cur_token.value, AP.input.get(l.getLine()));
		}
		else{
			throw new SyntaxException(l.getLine()+1,
			 l.getChar()+1, "EOF", AP.input.get(l.getLine()));
		}	

		} catch (SyntaxException e1) {
				try {
					AP.writer.write(e1.getMessage());
					AP.writer.newLine();
					AP.writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
		}
		done_parsing();

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // raiseStmt ::= RAISE expression CM expression CM expression 
            {
              RaiseStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression eee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expression> exp = new ArrayList<Expression>();
			exp.add(e);exp.add(ee);exp.add(eee);RESULT = new RaiseStmt(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiseStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // raiseStmt ::= RAISE expression CM expression 
            {
              RaiseStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expression> exp = new ArrayList<Expression>();
			exp.add(e);exp.add(ee);RESULT = new RaiseStmt(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiseStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // raiseStmt ::= RAISE expression 
            {
              RaiseStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expression> exp = new ArrayList<Expression>();
			exp.add(e);RESULT = new RaiseStmt(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiseStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // raiseStmt ::= RAISE 
            {
              RaiseStmt RESULT =null;
		RESULT = new RaiseStmt(new ArrayList<Expression>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("raiseStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // colcheck ::= 
            {
              String RESULT =null;
		AP.warning("CL Missing Before Suite");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colcheck",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // colcheck ::= CL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colcheck",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // call ::= ID LB RB 
            {
              Call RESULT =null;
		int iidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object iid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		AP.warning("Call with Empty Parameters");RESULT = new Call((String)iid,new ArrayList<Expression>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // call ::= ID LB expressionList RB 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expression> exp = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Call((String)id,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= call 
            {
              PrimaryExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary ::= BL 
            {
              PrimaryExpression RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BL(new Boolean(bl.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary ::= ST 
            {
              PrimaryExpression RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ST((String)st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= NM 
            {
              PrimaryExpression RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NM((String)nm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= ID 
            {
              PrimaryExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ID((String)id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // preprimary ::= 
            {
              ArrayList<String> RESULT =null;
		ArrayList<String> u = new ArrayList<String>(); RESULT = u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preprimary",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // preprimary ::= NO preprimary 
            {
              ArrayList<String> RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> pp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pp.add((String)no);RESULT = pp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preprimary",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // preprimary ::= PO preprimary 
            {
              ArrayList<String> RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> pp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pp.add((String)po);RESULT = pp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preprimary",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // preprimary ::= MO preprimary 
            {
              ArrayList<String> RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> pp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pp.add((String)mo);RESULT = pp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preprimary",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unaryExpression ::= preprimary primary 
            {
              UnaryExpression RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> pp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpression p = (PrimaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryExpression(pp,p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multExpression ::= multExpression MD unaryExpression 
            {
              MultExpression RESULT =null;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultExpression mexp = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression uexpr = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MultExpression(mexp,(String)md,uexpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multExpression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multExpression ::= multExpression DO unaryExpression 
            {
              MultExpression RESULT =null;
		int mexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultExpression mex = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int do1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int do1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object do1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression uexp = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  MultExpression(mex,(String)do1,uexp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multExpression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multExpression ::= multExpression DI unaryExpression 
            {
              MultExpression RESULT =null;
		int mxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultExpression mx = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression uex = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  MultExpression(mx,(String)di,uex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multExpression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multExpression ::= multExpression TO unaryExpression 
            {
              MultExpression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultExpression m = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ux = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  MultExpression(m,(String)to,ux);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multExpression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multExpression ::= unaryExpression 
            {
              MultExpression RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multExpression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithmeticExpression ::= arithmeticExpression MO multExpression 
            {
              ArithmeticExpression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArithmeticExpression ae = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultExpression mex = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArithmeticExpression(ae,(String)mo,mex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arithmeticExpression ::= arithmeticExpression PO multExpression 
            {
              ArithmeticExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArithmeticExpression a = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object po = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultExpression mx = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArithmeticExpression(a,(String)po,mx);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithmeticExpression ::= multExpression 
            {
              ArithmeticExpression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultExpression m = (MultExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // andExpression ::= andExpression LA arithmeticExpression 
            {
              AndExpression RESULT =null;
		int aexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AndExpression aex = (AndExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpression ax = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AndExpression(aex,ax);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // andExpression ::= arithmeticExpression 
            {
              AndExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpression a = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // orExpression ::= orExpression LO andExpression 
            {
              OrExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OrExpression o = (OrExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndExpression ax = (AndExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OrExpression(o,ax);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // orExpression ::= andExpression 
            {
              OrExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndExpression a = (AndExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("orExpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compOperator ::= IN 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // compOperator ::= IS 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)is;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compOperator ::= NE 
            {
              String RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)ne;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // compOperator ::= LG 
            {
              String RESULT =null;
		int lgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)lg;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // compOperator ::= LE 
            {
              String RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)le;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compOperator ::= GE 
            {
              String RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)ge;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // compOperator ::= EQ 
            {
              String RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)eq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // compOperator ::= GT 
            {
              String RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)gt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // compOperator ::= LT 
            {
              String RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)lt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparison ::= orExpression 
            {
              Comparison RESULT =null;
		int oexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrExpression oex = (OrExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = oex;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comparison ::= comparison compOperator orExpression 
            {
              Comparison RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Comparison c = (Comparison)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrExpression o = (OrExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Comparison(c,(String)co,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // andTest ::= andTest AND comparison 
            {
              AndTest RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AndTest a = (AndTest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comparison c = (Comparison)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AndTest(a,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andTest",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // andTest ::= comparison 
            {
              AndTest RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comparison c = (Comparison)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andTest",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression OR andTest 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aTright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndTest aT = (AndTest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expression(ex,aT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= andTest 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AndTest a = (AndTest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // returnStmt ::= RETURN 
            {
              ReturnStmt RESULT =null;
		AP.warning("Return Statement with no value");RESULT = new ReturnStmt(new ArrayList<Expression>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // returnStmt ::= RETURN expressionList 
            {
              ReturnStmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> el = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReturnStmt(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printStmt ::= PRINT expressionList 
            {
              PrintStmt RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> el = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrintStmt(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printStmt ::= PRINT 
            {
              PrintStmt RESULT =null;
		RESULT = new PrintStmt(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressionList ::= expression 
            {
              ArrayList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expression> expressionList1 = new ArrayList<Expression>();
				                  expressionList1.add(e);
				                  RESULT = expressionList1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressionList ::= expression CM 
            {
              ArrayList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expression> expressionList = new ArrayList<Expression>();
				                     expressionList.add(e);
				                     RESULT = expressionList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressionList ::= expression CM expressionList 
            {
              ArrayList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> el = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e);
                                                      RESULT = el;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // targetList ::= ID CM 
            {
              ArrayList<String> RESULT =null;
		int iidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<String> stCM = new ArrayList<String>();
			            stCM.add((String)iid);
			              RESULT = stCM;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("targetList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // targetList ::= ID 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			            ArrayList<String> stID = new ArrayList<String>();
			            stID.add((String)id);
			           RESULT = stID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("targetList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // targetList ::= ID CM targetList 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> t = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		t.add((String)i);RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("targetList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignmentStmt ::= targetList AO expressionList 
            {
              AssignmentStmt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> t = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> e = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignmentStmt(t,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classDef ::= CLASS ID suite 
            {
              ClassDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Suite su = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ClassDef((String)id,su);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDef",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // defParameter ::= ID 
            {
              DefParameter RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DefParameter((String)idd,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defParameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // defParameter ::= ID AO expression 
            {
              DefParameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DefParameter((String)id,ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defParameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameterList ::= defParameter 
            {
              ParameterList RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DefParameter dp = (DefParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<DefParameter> paraList= new ArrayList<DefParameter>();
				                     paraList.add(dp);
				                     RESULT = new ParameterList(paraList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameterList ::= defParameter CM parameterList 
            {
              ParameterList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DefParameter d = (DefParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		pl.defParameters.add(d);
				                                      RESULT = pl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameterList ::= 
            {
              ParameterList RESULT =null;
		ArrayList<DefParameter> paraList1= new ArrayList<DefParameter>();               
                    RESULT = new ParameterList(paraList1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcDef ::= DEF ID LB parameterList RB suite 
            {
              FuncDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Suite su = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FuncDef((String)id,pl,su);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDef",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // whileStmt ::= WHILE expression suite 
            {
              WhileStmt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sutright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Suite sut = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStmt(exp,sut,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // whileStmt ::= WHILE expression suite ELSE suite 
            {
              WhileStmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Suite s = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Suite su = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStmt(ex,s,su);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= statement 
            {
              ArrayList<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Statement> stats = new ArrayList<Statement>();
			                   stats.add(st);
			                   RESULT = stats;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= statements statement 
            {
              ArrayList<Statement> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> ss = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s);
                                          RESULT = ss;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // suitespec ::= NEWLINE INDENT statements DEDENT 
            {
              Suite RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> s = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Suite(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suitespec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // suitespec ::= stmtList NEWLINE 
            {
              Suite RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Suite(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suitespec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // suite ::= colcheck suitespec 
            {
              Suite RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Suite s1 = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseIfOptional ::= 
            {
              ElseIfOptional RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseIfOptional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseIfOptional ::= ELSE suite 
            {
              ElseIfOptional RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Suite su = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseIf(su);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseIfOptional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseIfOptional ::= ELIF expression suite elseIfOptional 
            {
              ElseIfOptional RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Suite s = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eliright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfOptional eli = (ElseIfOptional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Elif(ex,s,eli);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseIfOptional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifStmt ::= IF expression suite elseIfOptional 
            {
              IfStmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Suite s = (Suite)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eliright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElseIfOptional eli = (ElseIfOptional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(ex,s,eli);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compoundStmt ::= classDef 
            {
              CompoundStmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef c = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compoundStmt ::= funcDef 
            {
              CompoundStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compoundStmt ::= whileStmt 
            {
              CompoundStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt w = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compoundStmt ::= ifStmt 
            {
              CompoundStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt i = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simpleStmt ::= returnStmt 
            {
              SimpleStmt RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt rs = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simpleStmt ::= raiseStmt 
            {
              SimpleStmt RESULT =null;
		int rstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RaiseStmt rst = (RaiseStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simpleStmt ::= printStmt 
            {
              SimpleStmt RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintStmt ps = (PrintStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ps;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simpleStmt ::= assignmentStmt 
            {
              SimpleStmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignmentStmt as = (AssignmentStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = as;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simpleList ::= simpleStmt 
            {
              ArrayList<SimpleStmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleStmt s = (SimpleStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						ArrayList<SimpleStmt> l = new ArrayList<SimpleStmt>();
						l.add(s);			
						RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simpleList ::= simpleStmt SM 
            {
              ArrayList<SimpleStmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleStmt s = (SimpleStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						ArrayList<SimpleStmt> l = new ArrayList<SimpleStmt>();
						l.add(s);			
						RESULT = l;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simpleList ::= simpleStmt SM simpleList 
            {
              ArrayList<SimpleStmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleStmt s = (SimpleStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleStmt> sl = (ArrayList<SimpleStmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		sl.add(s); RESULT = sl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtList ::= simpleList 
            {
              StmtList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleStmt> sl = (ArrayList<SimpleStmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StmtList(sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= compoundStmt 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= stmtList NEWLINE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // res ::= 
            {
              ArrayList<Statement> RESULT =null;
		RESULT = new ArrayList<Statement>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // res ::= res statement 
            {
              ArrayList<Statement> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> r = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 r.add(s); RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // res ::= res NEWLINE 
            {
              ArrayList<Statement> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> r = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fileInput ::= error 
            {
              FileInput RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fileInput",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= fileInput EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FileInput start_val = (FileInput)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // fileInput ::= res 
            {
              FileInput RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> r = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FileInput(r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fileInput",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

